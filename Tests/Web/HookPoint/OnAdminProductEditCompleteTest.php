<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) LOCKON CO.,LTD. All Rights Reserved.
 *
 * http://www.lockon.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\ProductPriority\Tests\Web\HookPoint;

use Eccube\Common\Constant;
use Eccube\Tests\Web\Admin\AbstractAdminWebTestCase;
use Plugin\ProductPriority\Entity\ProductPriority;
use Plugin\ProductPriority\Repository\ProductPriorityRepository;

class OnAdminProductEditCompleteTest extends AbstractAdminWebTestCase
{
    /**
     * @var ProductPriorityRepository
     */
    private $productPriorityRepos;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->productPriorityRepos = $this->container->get(ProductPriorityRepository::class);
    }

    public function createFormData()
    {
        $faker = $this->getFaker();

        $price01 = $faker->randomNumber(5);
        if (mt_rand(0, 1)) {
            $price01 = number_format($price01);
        }

        $price02 = $faker->randomNumber(5);
        if (mt_rand(0, 1)) {
            $price02 = number_format($price02);
        }

        $form = [
            'class' => [
                'sale_type' => 1,
                'price01' => $price01,
                'price02' => $price02,
                'stock' => $faker->randomNumber(3),
                'stock_unlimited' => 0,
                'code' => $faker->word,
                'sale_limit' => null,
                'delivery_duration' => '',
            ],
            'name' => $faker->word,
            'product_image' => [],
            'description_detail' => $faker->realText,
            'description_list' => $faker->paragraph,
            'Category' => null,
            'Tag' => 1,
            'search_word' => $faker->word,
            'free_area' => $faker->realText,
            'Status' => 1,
            'note' => $faker->realText,
            'tags' => null,
            'images' => null,
            'add_images' => null,
            'delete_images' => null,
            Constant::TOKEN_NAME => 'dummy',
        ];

        return $form;
    }

    public function testOnAdminProductEditComplete()
    {
        $Product = $this->createProduct(null, 0);
        $i = 1;
        foreach ($Product->getProductCategories() as $ProductCategory) {
            $ProductPriority = new ProductPriority();
            $ProductPriority->setProductId($Product->getId());
            $ProductPriority->setCategoryId($ProductCategory->getCategory()->getId());
            $ProductPriority->setPriority($i++);
            $this->entityManager->persist($ProductPriority);
            $this->entityManager->flush($ProductPriority);
        }

        $ProductPriorities = $this->productPriorityRepos
            ->findBy(['product_id' => $Product->getId()]);

        $this->assertGreaterThanOrEqual(1, count($ProductPriorities), '1件以上登録されている');

        $formData = $this->createFormData();
        $formData['Category'] = null; // カテゴリを空にして登録する

        $this->client->request(
            'POST',
            $this->generateUrl('admin_product_product_edit', ['id' => $Product->getId()]),
            ['admin_product' => $formData]
        );

        $this->assertTrue(
            $this->client->getResponse()->isRedirect(
                $this->generateUrl('admin_product_product_edit', ['id' => $Product->getId()])
            )
        );

        $ProductPriorities = $this->productPriorityRepos
            ->findBy(['product_id' => $Product->getId()]);

        $this->expected = 0;
        $this->actual = count($ProductPriorities);
        $this->verify('削除されているはず');
    }
}
